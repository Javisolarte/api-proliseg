import { Injectable, NotFoundException, Logger } from "@nestjs/common";
import { SupabaseService } from "../supabase/supabase.service";
import type { CreatePuestoDto, UpdatePuestoDto } from "./dto/puesto.dto";

@Injectable()
export class PuestosService {
  private readonly logger = new Logger(PuestosService.name);

  constructor(private readonly supabaseService: SupabaseService) {}

  // üîπ Obtener todos los puestos
  async findAll() {
    this.logger.log("üîç Iniciando b√∫squeda de todos los puestos de trabajo...");
    const supabase = this.supabaseService.getClient();

    const { data, error } = await supabase
      .from("puestos_trabajo")
      .select(`
        *,
        contratos:contratos!puestos_trabajo_contrato_id_fkey(
          id,
          cliente_id,
          tipo_servicio_id,
          valor,
          fecha_inicio,
          fecha_fin,
          estado
        ),
        parent:parent_id(
          id,
          nombre,
          ciudad
        )
      `)
      .order("created_at", { ascending: false });

    if (error) {
      this.logger.error(`‚ùå Error al obtener puestos: ${error.message}`, error.stack);
      throw error;
    }

    this.logger.log(`‚úÖ ${data?.length || 0} puestos encontrados`);
    return data;
  }

  // üîπ Obtener un puesto por ID
  async findOne(id: number) {
    this.logger.log(`üîç Buscando puesto con ID: ${id}`);
    const supabase = this.supabaseService.getClient();

    const { data, error } = await supabase
      .from("puestos_trabajo")
      .select(`
        *,
        contratos:contratos!puestos_trabajo_contrato_id_fkey(
          id,
          cliente_id,
          tipo_servicio_id,
          valor,
          fecha_inicio,
          fecha_fin,
          estado
        ),
        parent:parent_id(
          id,
          nombre,
          ciudad
        )
      `)
      .eq("id", id)
      .single();

    if (error) {
      this.logger.error(`‚ùå Error al consultar puesto ID ${id}: ${error.message}`);
      throw error;
    }

    if (!data) {
      this.logger.warn(`‚ö†Ô∏è No se encontr√≥ el puesto con ID ${id}`);
      throw new NotFoundException(`Puesto de trabajo con ID ${id} no encontrado`);
    }

    this.logger.log(`‚úÖ Puesto encontrado: ${data.nombre || "(sin nombre)"}`);
    return data;
  }

  // üîπ Crear puesto
  async create(dto: CreatePuestoDto, userId: number) {
    this.logger.log(`üÜï Creando nuevo puesto por usuario ID ${userId}`);
    this.logger.debug(`üì¶ Datos recibidos: ${JSON.stringify(dto)}`);
    const supabase = this.supabaseService.getClient();

    const now = new Date().toISOString();
    const payload = {
      ...dto,
      creado_por: userId,
      updated_at: now,
      created_at: now,
    };

    this.logger.verbose(`‚û°Ô∏è Insertando en tabla 'puestos_trabajo' con payload: ${JSON.stringify(payload)}`);

    const { data, error } = await supabase
      .from("puestos_trabajo")
      .insert(payload)
      .select()
      .single();

    if (error) {
      this.logger.error(`‚ùå Error al crear puesto: ${error.message}`, error.stack);
      throw error;
    }

    this.logger.log(`‚úÖ Puesto creado exitosamente con ID: ${data.id}`);
    return data;
  }

  // üîπ Actualizar puesto
  async update(id: number, dto: UpdatePuestoDto, userId: number) {
    this.logger.log(`üõ†Ô∏è Actualizando puesto ID ${id} por usuario ${userId}`);
    this.logger.debug(`üì¶ Datos de actualizaci√≥n: ${JSON.stringify(dto)}`);

    const supabase = this.supabaseService.getClient();

    const { data: existing, error: findError } = await supabase
      .from("puestos_trabajo")
      .select("id")
      .eq("id", id)
      .single();

    if (findError) {
      this.logger.error(`‚ùå Error al verificar existencia del puesto ID ${id}: ${findError.message}`);
      throw findError;
    }

    if (!existing) {
      this.logger.warn(`‚ö†Ô∏è No se encontr√≥ el puesto con ID ${id} para actualizar`);
      throw new NotFoundException(`Puesto con ID ${id} no encontrado`);
    }

    const now = new Date().toISOString();
    const payload = {
      ...dto,
      actualizado_por: userId,
      updated_at: now,
    };

    this.logger.verbose(`‚û°Ô∏è Actualizando registro con payload: ${JSON.stringify(payload)}`);

    const { data, error } = await supabase
      .from("puestos_trabajo")
      .update(payload)
      .eq("id", id)
      .select()
      .single();

    if (error) {
      this.logger.error(`‚ùå Error al actualizar puesto ID ${id}: ${error.message}`, error.stack);
      throw error;
    }

    this.logger.log(`‚úÖ Puesto actualizado correctamente (ID: ${id})`);
    return data;
  }

  // üîπ Eliminaci√≥n l√≥gica (soft delete)
  async softDelete(id: number, userId: number) {
    this.logger.log(`üóëÔ∏è Iniciando eliminaci√≥n l√≥gica del puesto ID ${id} por usuario ${userId}`);
    const supabase = this.supabaseService.getClient();

    const { data: existing, error: findError } = await supabase
      .from("puestos_trabajo")
      .select("id, activo")
      .eq("id", id)
      .single();

    if (findError) {
      this.logger.error(`‚ùå Error al verificar puesto ID ${id}: ${findError.message}`);
      throw findError;
    }

    if (!existing) {
      this.logger.warn(`‚ö†Ô∏è Puesto con ID ${id} no encontrado para eliminar`);
      throw new NotFoundException(`Puesto con ID ${id} no encontrado`);
    }

    const now = new Date().toISOString();
    this.logger.verbose(`‚û°Ô∏è Marcando puesto ID ${id} como inactivo`);

    const { data, error } = await supabase
      .from("puestos_trabajo")
      .update({
        activo: false,
        actualizado_por: userId,
        updated_at: now,
      })
      .eq("id", id)
      .select()
      .single();

    if (error) {
      this.logger.error(`‚ùå Error al marcar como inactivo el puesto ID ${id}: ${error.message}`, error.stack);
      throw error;
    }

    this.logger.log(`‚úÖ Puesto ID ${id} marcado como inactivo correctamente`);
    return { message: "Puesto marcado como inactivo exitosamente", data };
  }
}
